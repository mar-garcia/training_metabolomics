---
title: "Quality Management in Metabolomics"
author: "Mar Garcia-Aloy"
format: 
  revealjs: 
    slide-number: true
    chalkboard: 
      buttons: true
    footer: mar.garcia@fmach.it
---

```{r setup, include=FALSE}
library(tidyverse)
library(patchwork)
```

## 

Quality Management (QM) encompasses a series of activities that provide a mechanism to ensure that measurements are repeatable.  

## 

Quality Management (QM) encompasses a series of activities that provide a mechanism to ensure that measurements are repeatable.  
<br>
**Some initial aspects to keep in mind...**  

::: incremental

- MS performance degrade with time -> reduce as much as possible the length of the chromatographic run  
- We cannot avoid analytical variability -> Add QC samples along your sequence
- Randomize the order in which the samples will be injected  
- In case or large sample sets, consider stratifying the samples across batches    
:::


## Randomization  

In case of small datasets -> complete randomization

```{r}
nr <- data.frame(
  color = rep(c("white", "red"), each = 10),
  variety = c(rep("pino grig", 3), rep("chardon", 3), "verment", 
              "moscato", "traminer", "sauvign",
              rep("merlot", 2), rep("legrein", 2), rep("sangiov", 2), 
              rep("pino noir", 2), "cannona", "shiraz"),
  order = seq(20)
)
p1 <- nr %>%
  ggplot() + 
  geom_point(aes(y = 1, x = order, fill = color), pch = 21, size = 3)  + 
  geom_text(aes(y = 1, x = order, label = variety), angle = 90, size = 3, 
            hjust = 1.5, vjust = 0, col = "grey") +
  theme_bw() + xlab("Injection Order") + ylab("") + 
  scale_fill_brewer(palette = "Set1", name = "Wine Color") + 
  theme(aspect.ratio = 0.5, legend.position = "none", 
        axis.text.y=element_blank()) +
  ggtitle("non random")

rn <- nr
set.seed(1234)
rn$order <- sample(seq(20))
rn <- rn[order(rn$order),]
p2 <- rn %>%
  ggplot() + 
  geom_point(aes(y = 1, x = order, fill = color), pch = 21, size = 3)  + 
  geom_text(aes(y = 1, x = order, label = variety), angle = 90, size = 3, 
            hjust = 1.5, vjust = 0, col = "grey") +
  theme_bw() + xlab("Injection Order") + ylab("") + 
  scale_fill_brewer(palette = "Set1", name = "Wine Color") + 
  theme(aspect.ratio = 0.5, legend.position = "bottom", 
        axis.text.y=element_blank())+
  ggtitle("random")

p1 + p2
```


## Randomization  

In case of large datasets -> block experimental design before randomization

::: incremental 

- Balance the number of samples for each factor of interest among the batches      
- Consider if allocate all samples from the same ID (i.e., plant, subject....) in the same batch  
:::


## Randomization  

In case of large datasets -> block experimental design before randomization


## Randomization: large datasets - Expl 1  

Wine study:  

::: incremental  

- 2 types of wines: white wine & red wine (20 samples /type of wine)  
- 12 varieties: pinot grigio, chardonnay, vermentino, moscato, [...] pinot noir, cannonau, shiraz (2-6 samples /variety)  

:::


## Randomization: large datasets - Expl 1  

Wine study:

```{r}
dt <- readxl::read_xlsx("rand_block_examples.xlsx")
dt$batch <- rep(seq(2), each = nrow(dt)/2)
dt$batch <- paste("Batch", dt$batch)
dt$order <- rep(seq(nrow(dt)/2), 2)
dt$variety <- gsub("pinot_", "p_", dt$variety)
dt$variety <- gsub("gewurztraminer", "traminer", dt$variety)
dt$variety <- substr(dt$variety, 1, 6)

p1 <- dt %>%
  ggplot() + 
  geom_point(aes(y = batch, x = order, fill = color), pch = 21, size = 3)  + 
  geom_text(aes(y = batch, x = order, label = variety), angle = 90, size = 3, 
            hjust = 1.5, vjust = 0, col = "grey") +
  theme_bw() + xlab("Injection Order") + ylab("") + 
  scale_fill_brewer(palette = "Set1", name = "Wine Color") + 
  theme(aspect.ratio = 0.5, legend.position = "none") +
  ggtitle("non block & non random") 

dt <- readxl::read_xlsx("rand_block_examples.xlsx")
tmp <- cbind(dt[c(1:20), ],
             rep("", 20), 
             rep("", 20), 
             rep("", 20), 
             rep("", 20), 
             rep("", 20), 
             rep("", 20), 
             dt[c(21:40), ]
)
colnames(tmp)[5:10] <- ""
print(tmp, row.names = FALSE)
```


## Randomization: large datasets - Expl 1  

Wine study:

```{r}
dt$color <- factor(dt$color, levels = unique(dt$color))
table(dt$color)
dt$variety <- factor(dt$variety, levels = unique(dt$variety))
table(dt$color, dt$variety)
```


## Randomization: large datasets - Expl 1  

Wine study:

::: incremental  

- Distribute the samples among 2 batches  
- Same amount of white/red wines /batch  
- Same amount of each variety /batch  

:::


## Randomization: large datasets - Expl 1  

Wine study:  

### Step 1: randomize samples

```{r}
set.seed(123)
dt$rnd <- sample(seq(nrow(dt)))

tmp <- cbind(dt[c(1:20), ],
             rep("", 20), 
             rep("", 20), 
             rep("", 20), 
             rep("", 20), 
             rep("", 20), 
             rep("", 20), 
             dt[c(21:40), ]
)
colnames(tmp)[6:11] <- ""
print(tmp, row.names = FALSE)
```


## Randomization: large datasets - Expl 1  

Wine study:  

### Step 2: order by color - variety - random

```{r}
dt <- dt[order(dt$color, dt$variety, dt$rnd),]

tmp <- cbind(dt[c(1:20), ],
             rep("", 20), 
             rep("", 20), 
             rep("", 20), 
             rep("", 20), 
             rep("", 20), 
             rep("", 20), 
             dt[c(21:40), ]
)
colnames(tmp)[6:11] <- ""
print(tmp, row.names = FALSE)
```


## Randomization: large datasets - Expl 1  

Wine study:  

### Step 3: distribute 1 sample/batch

```{r}
dt$batch <- rep(seq(2), nrow(dt)/2)
dt$variety <- gsub("pinot_", "pino_", dt$variety)
dt$variety <- substr(dt$variety, 1, 11)

tmp <- cbind(dt[c(1:20), ],
             rep("", 20), 
             rep("", 20), 
             dt[c(21:40), ]
)
colnames(tmp)[7:8] <- ""
print(tmp, row.names = FALSE)
```


## Randomization: large datasets - Expl 1  

Wine study:  

### Step 4: order by batch - random

```{r}
dt <- dt[order(dt$batch, dt$rnd),]
dt$variety <- substr(dt$variety, 1, 10)

tmp <- cbind(dt[c(1:20), ],
             rep("", 20), 
             rep("", 20), 
             dt[c(21:40), ]
)
colnames(tmp)[7:8] <- ""
print(tmp, row.names = FALSE)
```


## Randomization: large datasets - Expl 1  

Wine study:  

```{r}
dt$order <- rep(1:20, times = 2)
dt$batch <- paste("Batch", dt$batch)
dt$variety <- gsub("pino_", "p_", dt$variety)
dt$variety <- gsub("gewurztraminer", "traminer", dt$variety)
dt$variety <- substr(dt$variety, 1, 6)
p2 <- dt %>%
  ggplot() + 
  geom_point(aes(y = batch, x = order, fill = color), pch = 21, size = 3)  + 
  geom_text(aes(y = batch, x = order, label = variety), angle = 90, size = 3, 
            hjust = 1.5, vjust = 0, col = "grey") +
  theme_bw() + xlab("Injection Order") + ylab("") + 
  scale_fill_brewer(palette = "Set1", name = "Wine Color") + 
  theme(aspect.ratio = 0.5, legend.position = "bottom") +
  ggtitle("block & random")

p1 + p2
```


## Randomization: large datasets - Expl 1  

Wine study:  

```{r}
table(dt$batch, dt$color)
table(dt$batch[dt$color == "white"], dt$variety[dt$color == "white"])
table(dt$batch[dt$color == "red"], dt$variety[dt$color == "red"])
```


## Randomization: large datasets - Expl 2  

Kinetic study with cross-over design:  

::: incremental  

- 2 foods: A & B   
- 10 volunteers (5 men & 5 women)  
- 8 time-points /intervention  
- 2 sequences: A -> B / B -> A  

:::

## Randomization: large datasets - Expl 2  

:::: {.columns}

::: {.column width="35%"}

Kinetic study with cross-over design:  

- 2 foods: A & B   
- 10 volunteers  
- 8 time-points /intervention  
- 2 sequences  

:::

::: {.column width="65%"}

```{r}
par(mar = c(3,0,0,0))
plot(c(0, 1, 2, 4, 6, 12, 24, 48), c(0, 2, 4, 8, 4, 2, 1, 0), bty = "l", 
     type = "b", xlab = "time point", ylab = "", xaxt = "n", yaxt = "n")
axis(1, c(0, 1, 2, 4, 6, 12, 24, 48), paste0(c(0, 1, 2, 4, 6, 12, 24, 48), "h"))
```

:::

::::


::: incremental  

- All samples from the same volunteer in the same batch    

:::

## Randomization: large datasets - Expl 1  

Kinetic study:

```{r}
dt <- readxl::read_xlsx("rand_block_examples.xlsx", sheet = 2)
dt$batch <- rep(seq(2), each = nrow(dt)/2)
dt$batch <- paste("Batch", dt$batch)
dt$order <- rep(seq(nrow(dt)/2), 2)
dt$time <- formatC(dt$time, width = 2, flag = "0")
dt$id <- paste(formatC(dt$volunteer, width = 2, flag = "0"), 
               dt$food, dt$time, sep = "_")

p1 <- dt[c(1:20, 81:100),] %>%
  ggplot() + 
  geom_point(aes(y = batch, x = order, fill = gender), pch = 21, size = 3)  + 
  geom_text(aes(y = batch, x = order, label = id), angle = 90, size = 3, 
            hjust = 1.1, vjust = 0, col = "grey") +
  theme_bw() + xlab("Injection Order") + ylab("") + 
  scale_fill_brewer(palette = "Set1", name = "Gender") + 
  theme(aspect.ratio = 0.5, legend.position = "none") +
  ggtitle("non block & non random") 

dt <- readxl::read_xlsx("rand_block_examples.xlsx", sheet = 2)
tmp <- cbind(dt[c(1:80), ],
             rep("", 20), 
             rep("", 20), 
             rep("", 20), 
             rep("", 20), 
             rep("", 20), 
             rep("", 20), 
             dt[c(81:160), ]
)
colnames(tmp)[5:10] <- ""
print(tmp, row.names = FALSE)
```


## Randomization: large datasets - Expl 2  

Kinetic study:  
  
10 volunteers x 2 foods/volunteer x 8 time-points /food / volunteer = 160 samples  

::: incremental  

- Distribute the samples among 2 batches  
- Allocate 80 samples/batch    
- Put all samples from the same subject in the same batch  
- Same amount of men & women /batch  
- Distribute equally the order of interventions (A->B / B->A) between batches

:::


## Randomization: large datasets - Expl 2  

Kinetic study:  

### Step 1: randomize subjects

```{r}
dtx <- data.frame(
  volunteer = seq(10),
  gender = rep(c("male", "female"), each = 5),
  seq = rep(c("AB", "BA"), times = 5)
)
dtx$gender <- factor(dtx$gender, levels = unique(dtx$gender))

set.seed(123)
dtx$rnd <- sample(seq(nrow(dtx)))

print(dtx, row.names = FALSE)
```


## Randomization: large datasets - Expl 2  

Kinetic study:  

### Step 2: order by gender - sequence - random

```{r}
dtx <- dtx[order(dtx$gender, dtx$seq, dtx$rnd),]
print(dtx, row.names = FALSE)
```


## Randomization: large datasets - Expl 2  

Kinetic study:  

### Step 3: distribute 1 volunteer/batch

```{r}
dtx$batch <- rep(seq(2), nrow(dtx)/2)
print(dtx, row.names = FALSE)
```


## Randomization: large datasets - Expl 2  

Kinetic study:  

### Step 3: distribute 1 volunteer/batch

:::: {.columns}

::: {.column width="50%"}

```{r}
table(paste("Batch", dtx$batch), dtx$gender)
table(paste("Batch", dtx$batch), dtx$seq)
```

:::

::: {.column width="50%"}

```{r}
table(dtx$seq, dtx$gender, paste("Batch", dtx$batch))
```

:::

::::

## Randomization: large datasets - Expl 2  

Kinetic study:  

### Step 4: update dataset of samples with corresponding batch according to volunteer

```{r}
dt$batch <-  NA
for(i in seq(nrow(dtx))){
  idx <- which(dt$volunteer == dtx$volunteer[i])
  dt$batch[idx] <- dtx$batch[i]
}

tmp <- cbind(dt[c(1:80), ],
             rep("", 20), 
             rep("", 20), 
             rep("", 20), 
             rep("", 20), 
             rep("", 20), 
             rep("", 20), 
             dt[c(81:160), ]
)
colnames(tmp)[6:11] <- ""
print(tmp, row.names = FALSE)
```


## Randomization: large datasets - Expl 2  

Kinetic study:  

### Step 5: randomize samples

```{r}
set.seed(123)
dt$rnd <- sample(seq(nrow(dt)))

tmp <- cbind(dt[c(1:80), ],
             rep("", 20), 
             rep("", 20), 
             rep("", 20), 
             rep("", 20), 
             rep("", 20), 
             rep("", 20), 
             dt[c(81:160), ]
)
colnames(tmp)[7:12] <- ""
print(tmp, row.names = FALSE)
```


## Randomization: large datasets - Expl 2  

Kinetic study:  

### Step 6: order by batch - random

```{r}
dt <- dt[order(dt$batch, dt$rnd),]

tmp <- cbind(dt[c(1:80), ],
             rep("", 20), 
             rep("", 20), 
             rep("", 20), 
             rep("", 20), 
             rep("", 20), 
             dt[c(81:160), ]
)
colnames(tmp)[7:11] <- ""
print(tmp, row.names = FALSE)
```



## Randomization: large datasets - Expl 2  

Kinetic study:  

```{r}
dt$order <- rep(1:80, times = 2)
dt$batch <- paste("Batch", dt$batch)
dt$time <- formatC(dt$time, width = 2, flag = "0")
dt$id <- paste(formatC(dt$volunteer, width = 2, flag = "0"), 
               dt$food, dt$time, sep = "_")

p2 <- dt[c(1:20, 81:100),] %>%
  ggplot() + 
  geom_point(aes(y = batch, x = order, fill = gender), pch = 21, size = 3)  + 
  geom_text(aes(y = batch, x = order, label = id), angle = 90, size = 3, 
            hjust = 1.1, vjust = 0, col = "grey") +
  theme_bw() + xlab("Injection Order") + ylab("") + 
  scale_fill_brewer(palette = "Set1", name = "Gender") + 
  theme(aspect.ratio = 0.5, legend.position = "bottom") +
  ggtitle("block & random")

p1 + p2
```


## Quality Control Samples (QC)

Ref samples should be regularly injected along the sequence.  

They measure analytical stability (the sample is the same).  
<br>
Options:

-   Pooled samples (study-specific, intra-batch, long-term QC)*  
-   Phenotypic pooled samples*
-   Commercially available sample
-   Synthetic chemical standards mixture  


*They are representative of the composition of the study samples  

::: footer
Metabolomics. 2022;18(9):70. doi: 10.1007/s11306-022-01926-3
:::


## Sample (file) labeling

It is highly recommended to name the files in such a way that they are easily identifiable.  

::: incremental   

- Avoid spaces and special symbols: only use "_"  
- Separate the different characteristics by "_"  
- Examples of factors to include in the file name: order of injection, main class, sub-class, ID, time-point, replicate, ionization mode, MS modality (optional: study name/acronym, sample type)

:::

## Sample (file) labeling

It is highly recommended to name the files in such a way that they are easily identifiable.  

- Use the same number of descriptors (factors) for each file (i.e., same number of "_")  

::: incremental   

- Optional: Use the same number of characters for each descriptor  

:::


## Sample (file) labeling

Example:


```{r}
dt <- read.csv("C:/Users/garciaalom/Google Drive/projectes/course_wine/output/sequence_20221006.csv")
dt$variety <- gsub("gewurztraminer", "traminer", dt$variety)
dt$variety <- gsub("pinot grigio", "pin grigio", dt$variety)
cbind(dt[c(1:5, 8:16), c(12, 3)], dt[c(337:350), c(12, 3)])
```


## LC-MS injection queue structure

![](images/queue.png){fig-align="center"}

::: footer
Mol Nutr Food Res 2019;63(1):e1800384. doi: 10.1002/mnfr.201800384
:::


## Scheme for the use of QC samples  

:::: {.columns}

::: {.column width="35%"}
Procedure suggested by the `Metabolomics QA & QC Consortium (mQACC)` of the Metabolomics Society.
:::

::: {.column width="65%"}
![](images/scheme_QC.webp)
:::

::::


::: footer
Metabolomics. 2022;18(9):70. doi: 10.1007/s11306-022-01926-3
:::



## Analytical Quality Assessment  

::: incremental 

- General random/systematic effects monitoring (PCA)  
- Within-feature analysis precision (mass accuracy/stability, RT/intensity stability)   
- Within-feature linearity  
:::

## Analytical Quality Assessment  

General overview through PCA: Wine samples colored by type

![](images/NEG_wines_PCA_type.png)


## Analytical Quality Assessment  

General overview through PCA: Wines colored by inj. order

![](images/NEG_wines_PCA_order.png)


## Analytical Quality Assessment  

General overview through PCA: Urine samples colored by type

![](images/NEG_urine_PCA_type.png)


## Analytical Quality Assessment  

General overview through PCA: Urines colored by inj. order

![](images/NEG_urine_PCA_order.png)


## QC evaluation  

![](images/BPI_NEG.png){fig-align="center"}


## QC evaluation  

![](images/BPI_NEG_EIC.png){fig-align="center"}

## QC evaluation  

Chromatographic peak shape  

![](images/QC_NEG_169_EIC.png){fig-align="center"}

## QC evaluation  

Retention time stability

![](images/QC_NEG_169_RT.png){fig-align="center"}

## QC evaluation  

Mass accuracy and stability

![](images/QC_NEG_169_mz.png){fig-align="center"}

## QC evaluation  

Intensity stability

![](images/QC_NEG_169_intensity.png){fig-align="center"}


## QC evaluation  

Linearity

![](images/QC_linearity.png)